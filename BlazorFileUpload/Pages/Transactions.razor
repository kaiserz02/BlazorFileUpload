@page "/transactions"
@using BlazorFileUpload.Data
@using BlazorFileUpload.Model
@using BlazorFileUpload.Services;
@using CsvHelper.Configuration;
@using CsvHelper;
@using CsvHelper.TypeConversion;
@using Microsoft.EntityFrameworkCore
@using System.Globalization;
@inject AppDbContext appDbContext
@inject IJSRuntime js
@inject TransactionFileService TransactionFileService

<PageTitle>Transactions</PageTitle>

<div class="container mt-5">
    <div class="card mb-3">
        <div class="card-body d-flex flex-row align-items-center">
            <span class="flex-fill fw-bolder text-end p-1">Upload CSV:</span>
            <InputFile class="form-control form-control-sm w-25" OnChange="HandleFileUpload" accept=".csv" />
        </div>
    </div>

    <div class="card mb-3">
        <div class="card-header">
            <span class="fw-bold">Transactions</span>
        </div>
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="symbol" class="form-label">Symbol:</label>
                        <input type="text" id="symbol" @bind="symbol" class="form-control" placeholder="Enter symbol" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="order_side" class="form-label">Order Side:</label>
                        <input type="text" id="order_side" @bind="orderSide" class="form-control" placeholder="Enter Order Side" />
                    </div>
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-6 d-flex justify-content-start">
                    <button class="btn btn-primary me-2" @onclick="GetItemsBySymbol">Get Items by Symbol</button>
                    <button class="btn btn-primary" @onclick="GetItemsByOrderSide">Get Items by Order Side</button>
                </div>
                <div class="col-md-6 d-flex justify-content-end">
                    <button class="btn btn-secondary" @onclick="LoadTransactions">Refresh Table</button>
                </div>
            </div>

            <table class="table table-striped table-bordered">
                <thead class="table-dark">
                    <tr>
                        <th>Reference Number</th>
                        <th>Quantity</th>
                        <th>Amount</th>
                        <th>Name</th>
                        @* <th>Transaction Date</th> *@
                        <th>Symbol</th>
                        <th>Order Side</th>
                        <th>Order Status</th>
                    </tr>
                </thead>
                <tbody>
                    @if (transactionList != null && transactionList.Count > 0)
                    {
                        @foreach (var transaction in transactionList)
                        {
                            <tr>
                                <td>@transaction.ReferenceNumber</td>
                                <td>@transaction.Quantity</td>
                                <td>@transaction.Amount</td>
                                <td>@transaction.Name</td>
                                @* <td>@transaction.TransactionDate</td> *@
                                <td>@transaction.Symbol</td>
                                <td>@transaction.OrderSide</td>
                                <td>@transaction.OrderStatus</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="7" class="text-center">No transactions found</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private List<Transaction>? transactionList = new();
    private string symbol;
    private string orderSide;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender)
        {
            await LoadTransactions();
            await InvokeAsync(StateHasChanged);
        }
    }
    public async Task LoadTransactions() {
        transactionList = await appDbContext.Transactions.ToListAsync();
    }
    private async Task HandleFileUpload(InputFileChangeEventArgs e) {
        if (e.File is not null)
        {
            var file = e.File;
            if (file.Size > 1048576)
            {
                // File size exceeds the limit, return a Bad Request response
                await js.InvokeVoidAsync("alert", "File size exceeds 1MB limit. Please upload a smaller file.");
                return;
            }

            var config = new CsvConfiguration(CultureInfo.InvariantCulture) { HasHeaderRecord = false };
            using (var reader = new StreamReader(file.OpenReadStream(maxAllowedSize: 1048576)))
            using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
            {
                try
                {
                    var transactions = await csv.GetRecordsAsync<Transaction>().ToListAsync();
                    if (transactions == null || !transactions.Any())
                    {
                        // No valid records found in the CSV, return a Bad Request response
                        await js.InvokeVoidAsync("alert", "No valid records found in the CSV file.");
                        return;
                    }

                    // Add valid transactions to the database
                    await appDbContext.Transactions.AddRangeAsync(transactions);
                    await appDbContext.SaveChangesAsync();

                    // Reload transactions
                    await LoadTransactions();

                    // File uploaded successfully, return an HTTP Code 200
                    await js.InvokeVoidAsync("alert", "Csv added successfully!");
                }
                catch (Exception ex)
                {
                    // Exception occurred during processing, return a Bad Request response
                    await js.InvokeVoidAsync("alert", "An error occurred while processing the CSV file. Please try again later.");
                }
            }
        }
    }
    private async Task GetItemsBySymbol() {
        try
        {
            var transactions = await TransactionFileService.GetItemsBySymbol(symbol);
            transactionList = transactions?.ToList() ?? new List<Transaction>();
        }
        catch (HttpRequestException ex)
        {
            await js.InvokeVoidAsync("alert", $"Failed to fetch transactions: {ex.Message}");
        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", $"An error occurred: {ex.Message}");
        }
    }   
    private async Task GetItemsByOrderSide() {
        try
        {
            var transactions = await TransactionFileService.GetItemsByOrderSide(orderSide);
            transactionList = transactions?.ToList() ?? new List<Transaction>();
        }
        catch (HttpRequestException ex)
        {
            await js.InvokeVoidAsync("alert", $"Failed to fetch transactions: {ex.Message}");
        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", $"An error occurred: {ex.Message}");
        }
    }
}

