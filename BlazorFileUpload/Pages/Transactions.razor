@page "/transactions"
@using BlazorFileUpload.Data
@using BlazorFileUpload.Model
@using CsvHelper.Configuration;
@using CsvHelper;
@using CsvHelper.TypeConversion;
@using Microsoft.EntityFrameworkCore
@using System.Globalization;
@inject AppDbContext appDbContext
@inject IJSRuntime js

<PageTitle>Transactions</PageTitle>

<div class="card mb-2">
    <div class="card-body d-flex flex-row">
        <span class="flex-fill fw-bolder text-end p-1">Upload CSV: </span>
        <InputFile class="form-control form-control-sm w-25" OnChange="HandleFileUpload"/>
    </div>
</div>
<div class="card">
    <div class="card-body p-0">
        <span class="flex-fill fw-bolder">Transactions</span>
    </div>
    <table class="table table-striped mb-0">
        <thead>
            <tr>
                <th>Reference Number</th>
                <th>Quantity</th>
                <th>Amount</th>
                <th>Name</th>
                @* <th>Transaction Date</th> *@
                <th>Symbol</th>
                <th>OrderSide</th>
                <th>OrderStatus</th>
            </tr>
        </thead>
        <tbody>
            @if (transactionList != null)
            {
                @foreach (var transaction in transactionList)
                {
                    <tr>
                        <td>@transaction.ReferenceNumber</td>
                        <td>@transaction.Quantity</td>
                        <td>@transaction.Amount</td>
                        <td>@transaction.Name</td>
                        @* <td>@transaction.TransactionDate</td> *@
                        <td>@transaction.Symbol</td>
                        <td>@transaction.OrderSide</td>
                        <td>@transaction.OrderStatus</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>
@code {
    private List<Transaction>? transactionList = null;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender)
        {
            await LoadTransactions();
            await InvokeAsync(StateHasChanged);
        }
    }
    public async Task LoadTransactions() {
        transactionList = await appDbContext.Transactions.ToListAsync();
    }
    private async Task HandleFileUpload(InputFileChangeEventArgs e) {
        if (e.File is not null)
        {
            var file = e.File;
            var config = new CsvConfiguration(CultureInfo.InvariantCulture) { HasHeaderRecord = false };
            using (var reader = new StreamReader(file.OpenReadStream(maxAllowedSize: 1048576)))
            using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
            {
                var transactions = await csv.GetRecordsAsync<Transaction>().ToListAsync();
                await appDbContext.Transactions.AddRangeAsync(transactions);
                await appDbContext.SaveChangesAsync();
                await LoadTransactions();
                await js.InvokeVoidAsync("alert", "Csv added successfully!");
            }
        }
    }
    
}
